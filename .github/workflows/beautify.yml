name: Beautify Typescript Code

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

jobs:
  beautify_backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/nest.js/package-lock.json
    - name: Install node modules
      run: |
       cd backend/nest.js
       npm install
    - name: Beautify Code with prettier
      run: |
       cd backend/nest.js
       npm run format
    - name: Git status
      run: |
       git status
    - name: Git diff
      run: |
       git diff
    - name: Build project
      run: |
       cd backend/nest.js
       npm run build --if-present
    - name: Unit test Built In
      run: |
       cd backend/nest.js
       npm test
    - name: "Install Github Cli"
      run: |
        mkdir ~/.github
        cd ~/.github
        GITHUB_REPO=cli/cli
        GITHUB_URL_API=https://api.github.com/repos/$GITHUB_REPO/releases
        GITHUB_FILE=$(curl -LJsS "$GITHUB_URL_API" | jq -r '.[0].assets[] | select(.name | endswith("linux_amd64.deb")).browser_download_url')
        curl -OL $GITHUB_FILE
        sudo dpkg -i *.deb
        echo ${{ secrets.TOKEN }} > token
        gh auth login --with-token < token
        gh auth status
        rm -rf token
        git config --global user.email "GitHubBot@localhost"
        git config --global user.name "GitHubBot"
        git config --global core.fileMode false
    - name: "Add Pull Request"
      run: |
        cd backend/nest.js
        if [[ ! `git status --porcelain` ]]; then
          echo "No changes, not need to commit."
          exit 0
        fi
        BRANCH_PREFIX="updater"
        COMMIT=$(git rev-parse --verify HEAD)
        ORIGINAL_BRANCH_NAME="$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)"
        if [[ $ORIGINAL_BRANCH_NAME = "$BRANCH_PREFIX/"* ]]; then
          echo "No need to create branch."
          exit 0
        fi
        BRANCH_NAME="$BRANCH_PREFIX/$ORIGINAL_BRANCH_NAME"
        BRANCH_EXIST=`git branch --list $BRANCH_NAME`
        if [ $BRANCH_EXIST ]; then
          echo "Override branch $BRANCH_NAME"
          git checkout $BRANCH_NAME
          git revert $COMMIT
        else
          echo "Create branch $BRANCH_NAME"
          git checkout -b $BRANCH_NAME
        fi
        echo "Commit changes"
        git add .
        git commit -m "Formatting code"
        echo "Push changes"
        git push origin $BRANCH_NAME -f
        echo "Check if PR exist"
        TEST=`gh pr view $BRANCH_NAME 2> /dev/null` || true
        echo $TEST | cat -e
        if test -z $TEST ; then
          echo "Create PR"
          gh pr create --base $ORIGINAL_BRANCH_NAME --title "Beautify code of $ORIGINAL_BRANCH_NAME" --body "Auto created PR"
        else
          echo "No need to create PR"
        fi
      continue-on-error: true
#          gh pr create --base $ORIGINAL_BRANCH_NAME --title "Beautify code of $ORIGINAL_BRANCH_NAME" --body "Auto created PR"
#          git request-pull origin https://github.com/tristiisch/ft_transcendence origin/$ORIGINAL_BRANCH_NAME